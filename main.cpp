
#include "MapGen.cpp"
#include "Render.cpp"
#include "UI.cpp"
#include "Physics.cpp"
#undef main

#include "Utilities.h"



// Call this once during each render loop in order to determine when the user wishes to terminate the program
bool ProcessInput(int *mouseX, int* mouseY)
{
    // Return this value to tell the caller whether or not it should continue rendering
    // We will terminate the application if any key is pressed
    bool keepRenderLoopRunning = true;

    // Events are generated by SDL whenever something occurs system-wide
    // We are only interested in keyboard events and when the user closes the window
    // We will terminate the application if a key is pressed or if the window is manually closed
    SDL_Event event;

    // Process all events and return whether or not to quit
    while (SDL_PollEvent(&event))
    {
        // Handle relevant SDL events
        switch (event.type)
        {
        case SDL_MOUSEMOTION:
            *mouseX = (int)floor(event.button.x / (g_kWindowWidth / g_kRenderWidth));
            *mouseY = (int)floor(event.button.y / (g_kWindowHeight / g_kRenderHeight));
            break;
            // Terminate application if a key is pressed or if the user closes the window
        
        case SDL_KEYDOWN:
            switch( event.key.keysym.sym ){
                case SDLK_ESCAPE:
                    keepRenderLoopRunning = false;
                    break;
            }
            break;

        case SDL_QUIT:
            keepRenderLoopRunning = false;
            break;
        
        }
    }

    // Let the caller know if it should continue rendering, otherwise terminate
    return keepRenderLoopRunning;
}

int main()
{
    bool Arthur = true;
    SDL_Window* pWindow = nullptr;
    SDL_Renderer* pRenderer = nullptr;
    SDL_Texture* pTexture = nullptr;

    UI mainUI;
    
    if (e(Render::Startup(&pWindow, &pRenderer, &pTexture), "Startup Failed. Aborting...\n"))
    {
        Render::Shutdown(&pWindow, &pRenderer, &pTexture);
        return -1;
    }

    bool running = true;
    bool firstFrame = true;

    uint64_t totalTicks = 0;
    uint64_t totalFramesRendered = 0;
    uint64_t lastTick = 0;

    uint32_t * pixelBuffer;
    pixelBuffer = (uint32_t *)malloc(g_kRenderHeight * g_kRenderWidth * sizeof(uint32_t));

    int mouseX = 0;
    int mouseY = 0;

    

    b2Vec2 Gravity(0.0f, 9.8f);
    b2World World(Gravity);
    b2BodyDef groundBodyDef;
    groundBodyDef.position.Set(0.0f, -10.0f);
    b2Body* groundBody = World.CreateBody(&groundBodyDef);
    b2PolygonShape groundBox;
    groundBox.SetAsBox(50.0f, 10.0f);
    groundBody -> CreateFixture(&groundBox, 0.0f);

    b2BodyDef bodyDef;
    bodyDef.type = b2_dynamicBody;
    bodyDef.position.Set(0.0f, 4.0f);
    b2Body* body = World.CreateBody(&bodyDef);
    b2PolygonShape dynamicBox;
    dynamicBox.SetAsBox(1.0f, 1.0f);
    b2FixtureDef fixtureDef;
    fixtureDef.shape = &dynamicBox;
    fixtureDef.density = 1.0f;
    fixtureDef.friction = 0.3f;
    body -> CreateFixture(&fixtureDef);

    // Time
    Uint64 NOW = SDL_GetPerformanceCounter();
    Uint64 LAST = 0;
    float deltaTime = 0;

    while (running)
    {
        if (firstFrame)
        {
            lastTick = SDL_GetPerformanceCounter();
            firstFrame = false;
            // Sprites
            mainUI.addSprite("ISO-test", "Assets/sprites/iso-test.bmp", pWindow, pRenderer);
        }
        else
        {
            // Animation update
            // Physics update
            World.Step(deltaTime, g_kVelocityIterations, g_kPositionIterations);
            b2Vec2 position = body->GetPosition();
            float angle = body->GetAngle();
            printf("%4.2f %4.2f %4.2f\n", position.x, position.y, angle);

            // Input
            running = ProcessInput(&mouseX, &mouseY);
            // Gamelogic

            // Time
            uint64_t currentTick = SDL_GetPerformanceCounter();
            totalTicks += currentTick - lastTick;
            lastTick = currentTick;
            ++totalFramesRendered;

            LAST = NOW;
            NOW = SDL_GetPerformanceCounter();
            deltaTime = (float)((NOW - LAST)*1000 / (float)SDL_GetPerformanceFrequency() );

            // Rendering
            SDL_RenderClear(pRenderer);
            SDL_RenderPresent(pRenderer);
            

        }
    }
  
    // Display render and timing information
    std::cout << "Total Frames:    " << totalFramesRendered << "\n";
    std::cout << "Total Time:      " << static_cast<double>(totalTicks) / SDL_GetPerformanceFrequency() << "s\n";
    std::cout << "Average FPS:     " << static_cast<double>(totalFramesRendered)* SDL_GetPerformanceFrequency() / totalTicks << "\n";

    Render::Shutdown(&pWindow, &pRenderer, &pTexture);
    
    return 0;
}